'''
=================================================
Copyright 2011 Kulverstukas

    This file is part of D0xBase.

    D0xBase is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation version 3

    D0xBase is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with D0xBase.  If not, see http://www.gnu.org/licenses/
=================================================

Shouts: Evilzone.org
You can contact me at: kulverstukas@kaime.lt
--------
Description:
  This module is part of "D0xBase" project.
  Any modification without knowing what you are doing will result
  in unwanted behavior and can stop working.
  
  This module defines methods for exporting a record from
  the database into various formats.
--------
'''

import os
import datetime
import xml.etree.ElementTree as ET
from xml.dom.minidom import parseString

class Export:
    def __init__(self):
        self.exportPath = 'resources/exports'
        self.header = '# This file has been generated by D0xBase %s on %s\n\n'
#====================================
    def checkForPath(self):
        '''Checks if a folder named "exports" exists.
        If not then we create it'''
        if ((os.path.exists(self.exportPath) == False) or (os.path.isdir(self.exportPath) == False)):
            os.makedirs(self.exportPath)
#====================================
    def exportAsText(self, version, info):
        '''Exports the record into a text file
        with a filename of the record ID.
        If The file exists - it is overwritten'''
        self.checkForPath()
        exportFile = open(self.exportPath+'/D0xExport-ID '+str(info[0])+'.txt', 'w')
        # before we write the record into a file, we put a header there
        exportFile.write(self.header % (version, datetime.date.today()))
        exportFile.write(info[1])
        exportFile.close()
#====================================
    def exportAsXML(self, version, info):
        '''Exports the record into an XML file
        with a filename of the record ID.
        If the file exists - it is overwritten.'''
        self.checkForPath()
        
        rootTag = ET.Element('d0xExport')

        d0xInfo = ET.SubElement(rootTag, 'd0xInfo')
        exportInfo = ET.SubElement(d0xInfo, 'exportInfo')
        exportInfo.text = ('This file was generated by D0xBase %(version)s for trading and backup.\n'+
                          'You can use this file to import it into the database.') % {'version':version}
        exportDate = ET.SubElement(d0xInfo, 'date')
        exportDate.text = '%(date)s' % {'date':datetime.date.today()}

        record = ET.SubElement(rootTag, 'record')
        recordId = ET.SubElement(record, 'id')
        recordId.text = str(info[0])
        recordInfo = ET.SubElement(record, 'info')
        recordInfo.text = info[1]
        recordModDate = ET.SubElement(record, 'modDate')
        recordModDate.text = info[2]

        xmlData = parseString(ET.tostring(rootTag))
        
        exportFile = open(self.exportPath+'/D0xExport-ID '+str(info[0])+'.xml', 'w')
        exportFile.write(xmlData.toprettyxml(indent='  '))
        exportFile.close()

#====================================
